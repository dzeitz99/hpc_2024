Exercise 1:
a. p in an array of integers, in C++ it's int[], in C it's int *.

b. *p refers to an element in p so its an integer.

c. &p refers to the address of p , which is of type int **.

d. The value of *p is 10.

e. The value of p[0] is 10.

f. The value of p[3] is 40.

g. The value of *(p+5) is 60.

h. The value of *p+5 is the first element in p plus 5 so 15.

i. In C/C++, p[-1] tries to set the element before the first element of p, which shouldn't be done and goes beyond the bounds of the array. Here it sets p[9] to 42.

j. q[0] is equal to *q which is equal to p-1, so that would point to p[9], which is 100.

k. *(q+10) is the tenth element of p whose value is 100.

l. *(q+11) is the first element of p as it goes beyond the last element, similar to -1 going to the last element, so its value is 10.

Exercise 2:

a. M is of type &p so its type is int **.

b. M is a pointer to a pointer, it's the address of the array of pointers.
  *M is the first element in M, which is a pointer to the first integer array (M[0]).
  **M dereferences *M, giving the value of the first integer in M[0].

c. M[1][3] is the fourth element [3] in the second array (M[1]), which is 8.
   *(M[0]+1) is the second element in the first array (M[0]), which is 2.
   *(*(M+1)+3) is the same as M[1][3], so 8.

d. M[0] and M[1] are dynamically are not necessarily stored next to each other in memory as they are seperate arrays. So, *(M[0]+5) == M[1][0] is not necessarily true.

Exercise 3:

a. x is the column and y is the row.

b. 6*14=84 elements are in the table.

c. In row major (1,3) and (1,4) are next to each other and in column major (1,3) and (2,3) are next to each other.

d. Usually row major is faster but in certain applications such as large matrix multiplications it can be better to use column major (e.g. FORTRAN, MATLAB).

e. Stride in x- dimension in row major is 1, in the y-dimension it is 14

f. Each row has 14 entries so to go to the same x in the row above or below we need to go through 14 elements.

g. A[10] is (0,10).

h. element (3,0) would be A[42] and

i. A[101] would be (7,4).
 
